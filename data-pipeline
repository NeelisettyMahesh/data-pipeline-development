import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.impute import SimpleImputer

# üè∑Ô∏è Define your target column name here
TARGET_COLUMN = "target"  # Change this to any column name if needed

# Step 1: Load the dataset
data = pd.read_csv("data.csv")

# Step 2: Separate features and target
X = data.drop(TARGET_COLUMN, axis=1)
y = data[TARGET_COLUMN]

# Step 3: Identify column types
numerical_cols = X.select_dtypes(include=["int64", "float64"]).columns.tolist()
categorical_cols = X.select_dtypes(include=["object"]).columns.tolist()

# Step 4: Define preprocessing for numeric features
numeric_transformer = Pipeline(steps=[
    ("imputer", SimpleImputer(strategy="mean")),
    ("scaler", StandardScaler())
])

# Step 5: Define preprocessing for categorical features
categorical_transformer = Pipeline(steps=[
    ("imputer", SimpleImputer(strategy="most_frequent")),
    ("encoder", OneHotEncoder(handle_unknown="ignore", sparse_output=False))  # Updated here
])


# Step 6: Combine preprocessing steps
preprocessor = ColumnTransformer(transformers=[
    ("num", numeric_transformer, numerical_cols),
    ("cat", categorical_transformer, categorical_cols)
])

# Step 7: Build full pipeline
full_pipeline = Pipeline(steps=[
    ("preprocessor", preprocessor)
])

# Step 8: Split data
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# Step 9: Fit and transform
X_train_processed = full_pipeline.fit_transform(X_train)
X_test_processed = full_pipeline.transform(X_test)

# Step 10: Get final feature names
ohe = full_pipeline.named_steps["preprocessor"].named_transformers_["cat"].named_steps["encoder"]
cat_encoded_cols = ohe.get_feature_names_out(categorical_cols)
final_feature_names = numerical_cols + list(cat_encoded_cols)

# Step 11: Convert to DataFrame
X_train_df = pd.DataFrame(X_train_processed, columns=final_feature_names)
X_test_df = pd.DataFrame(X_test_processed, columns=final_feature_names)

# Step 12: Concatenate with target
train_final = pd.concat([X_train_df, y_train.reset_index(drop=True).rename(TARGET_COLUMN)], axis=1)
test_final = pd.concat([X_test_df, y_test.reset_index(drop=True).rename(TARGET_COLUMN)], axis=1)

# Step 13: Save to CSV
train_final.to_csv("processed_train.csv", index=False)
test_final.to_csv("processed_test.csv", index=False)

